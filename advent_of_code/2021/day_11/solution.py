data = []                                                                       
                                                                                
with open('input.txt') as file:                                                 
    for line in file:                                                           
        data.append(line) 

data = list(map(lambda x: list(x.strip()), data))
data = [[int(x) for x in line] for line in data]
order = 10
# print(data)

step_01 = [
    [6,5,9,4,2,5,4,3,3,4],
    [3,8,5,6,9,6,5,8,2,2],
    [6,3,7,5,6,6,7,2,8,4],
    [7,2,5,2,4,4,7,2,5,7],
    [7,4,6,8,4,9,6,5,8,9],
    [5,2,7,8,6,3,5,7,5,6],
    [3,2,8,7,9,5,2,8,3,2],
    [7,9,9,3,9,9,2,2,4,5],
    [5,9,5,7,9,5,9,6,6,5],
    [6,3,9,4,8,6,2,6,3,7],
]
step_02 = [
    [8,8,0,7,4,7,6,5,5,5],
    [5,0,8,9,0,8,7,0,5,4],
    [8,5,9,7,8,8,9,6,0,8],
    [8,4,8,5,7,6,9,6,0,0],
    [8,7,0,0,9,0,8,8,0,0],
    [6,6,0,0,0,8,8,9,8,9],
    [6,8,0,0,0,0,5,9,4,3],
    [0,0,0,0,0,0,7,4,5,6],
    [9,0,0,0,0,0,0,8,7,6],
    [8,7,0,0,0,0,6,8,4,8],
]
step_03 = [
    [0,0,5,0,9,0,0,8,6,6],
    [8,5,0,0,8,0,0,5,7,5],
    [9,9,0,0,0,0,0,0,3,9],
    [9,7,0,0,0,0,0,0,4,1],
    [9,9,3,5,0,8,0,0,6,3],
    [7,7,1,2,3,0,0,0,0,0],
    [7,9,1,1,2,5,0,0,0,9],
    [2,2,1,1,1,3,0,0,0,0],
    [0,4,2,1,1,2,5,0,0,0],
    [0,0,2,1,1,1,9,0,0,0],
]
step_04 = [
    [2,2,6,3,0,3,1,9,7,7],
    [0,9,2,3,0,3,1,6,9,7],
    [0,0,3,2,2,2,1,1,5,0],
    [0,0,4,1,1,1,1,1,6,3],
    [0,0,7,6,1,9,1,1,7,4],
    [0,0,5,3,4,1,1,1,2,2],
    [0,0,4,2,3,6,1,1,2,0],
    [5,5,3,2,2,4,1,1,2,2],
    [1,5,3,2,2,4,7,2,1,1],
    [1,1,3,2,2,3,0,2,1,1],
]
step_05 = [
    [4,4,8,4,1,4,4,0,0,0],
    [2,0,4,4,1,4,4,0,0,0],
    [2,2,5,3,3,3,3,4,9,3],
    [1,1,5,2,3,3,3,2,7,4],
    [1,1,8,7,3,0,3,2,8,5],
    [1,1,6,4,6,3,3,2,3,3],
    [1,1,5,3,4,7,2,2,3,1],
    [6,6,4,3,3,5,2,2,3,3],
    [2,6,4,3,3,5,8,3,2,2],
    [2,2,4,3,3,4,1,3,2,2],
]
step_06 = [
    [5,5,9,5,2,5,5,1,1,1],
    [3,1,5,5,2,5,5,2,2,2],
    [3,3,6,4,4,4,4,6,0,5],
    [2,2,6,3,4,4,4,4,9,6],
    [2,2,9,8,4,1,4,3,9,6],
    [2,2,7,5,7,4,4,3,4,4],
    [2,2,6,4,5,8,3,3,4,2],
    [7,7,5,4,4,6,3,3,4,4],
    [3,7,5,4,4,6,9,4,3,3],
    [3,3,5,4,4,5,2,4,3,3],
]
step_07 = [
    [6,7,0,7,3,6,6,2,2,2],
    [4,3,7,7,3,6,6,3,3,3],
    [4,4,7,5,5,5,5,8,2,7],
    [3,4,9,6,6,5,5,7,0,9],
    [3,5,0,0,6,2,5,6,0,9],
    [3,5,0,9,9,5,5,5,6,6],
    [3,4,8,6,6,9,4,4,5,3],
    [8,8,6,5,5,8,5,5,5,5],
    [4,8,6,5,5,8,0,6,4,4],
    [4,4,6,5,5,7,4,6,4,4],
]
step_08 = [
    [7,8,1,8,4,7,7,3,3,3],
    [5,4,8,8,4,7,7,4,4,4],
    [5,6,9,7,6,6,6,9,4,9],
    [4,6,0,8,7,6,6,8,3,0],
    [4,7,3,4,9,4,6,7,3,0],
    [4,7,4,0,0,9,7,6,8,8],
    [6,9,0,0,0,0,7,5,6,4],
    [0,0,0,0,0,0,9,6,6,6],
    [8,0,0,0,0,0,4,7,5,5],
    [6,8,0,0,0,0,7,7,5,5],
]
step_09 = [
    [9,0,6,0,0,0,0,6,4,4],
    [7,8,0,0,0,0,0,9,7,6],
    [6,9,0,0,0,0,0,0,8,0],
    [5,8,4,0,0,0,0,0,8,2],
    [5,8,5,8,0,0,0,0,9,3],
    [6,9,6,2,4,0,0,0,0,0],
    [8,0,2,1,2,5,0,0,0,9],
    [2,2,2,1,1,3,0,0,0,9],
    [9,1,1,1,1,2,8,0,9,7],
    [7,9,1,1,1,1,9,9,7,6],
]
step_10 = [
    [0,4,8,1,1,1,2,9,7,6],
    [0,0,3,1,1,1,2,0,0,9],
    [0,0,4,1,1,1,2,5,0,4],
    [0,0,8,1,1,1,1,4,0,6],
    [0,0,9,9,1,1,1,3,0,6],
    [0,0,9,3,5,1,1,2,3,3],
    [0,4,4,2,3,6,1,1,3,0],
    [5,5,3,2,2,5,2,3,5,0],
    [0,5,3,2,2,5,0,6,0,0],
    [0,0,3,2,2,4,0,0,0,0]
]
step_20 = [
    [3,9,3,6,5,5,6,4,5,2],
    [5,6,8,6,5,5,6,8,0,6],
    [4,4,9,6,5,5,5,6,9,0],
    [4,4,4,8,6,5,5,5,8,0],
    [4,4,5,6,8,6,5,5,7,0],
    [5,6,8,0,0,8,6,5,7,7],
    [7,0,0,0,0,0,9,8,9,6],
    [0,0,0,0,0,0,0,3,4,4],
    [6,0,0,0,0,0,0,3,6,4],
    [4,6,0,0,0,0,9,5,4,3],
]
step_100 = [
    [0,3,9,7,6,6,6,8,6,6],
    [0,7,4,9,7,6,6,9,1,8],
    [0,0,5,3,9,7,6,9,3,3],
    [0,0,0,4,2,9,7,8,2,2],
    [0,0,0,4,2,2,9,8,9,2],
    [0,0,5,3,2,2,2,8,7,7],
    [0,5,3,2,2,2,2,9,6,6],
    [9,3,2,2,2,2,8,9,6,6],
    [7,9,2,2,2,8,6,8,6,6],
    [6,7,8,9,9,9,8,7,6,6],
]

def flash(data, x, y, flashed, flashes):
    adjacents = (
        (-1, -1), (-1, 0), (-1, 1), 
        ( 0, -1),          ( 0, 1),
        ( 1, -1), ( 1, 0), ( 1, 1)
    )

    for adjacent in adjacents:
        i, j = adjacent
        if order > x+i >= 0 and order > y+j >= 0:
            # if data[x+i][y+j] == 0:
            if (x+i, y+j) in flashed:
                continue
            if data[x+i][y+j] == 9:
                flashes += 1
                data[x+i][y+j] = 0
                flashed.append((x+i, y+j))
                flash(data, x+i, y+j, flashed, flashes)
            else:
                data[x+i][y+j] += 1

def part_one(data):
    steps = 100
    flashes = 0
    foo = 0

    for _ in range(steps):
        flashed = []
        for x in range(order):
            for y in range(order):
                if (x, y) in flashed:
                # if data[x][y] == 0:
                    continue
                if data[x][y] == 9:
                    flashes += 1
                    data[x][y] = 0
                    flashed.append((x, y))
                    flash(data, x, y, flashed, flashes)
                else:
                    data[x][y] += 1
        a = [item for sublist in data for item in sublist]
        foo += a.count(0)

    return foo

print(part_one(data))

def part_two(data):
    steps = 300
    flashes = 0

    for step in range(steps):
        flashed = []
        for x in range(order):
            for y in range(order):
                if (x, y) in flashed:
                # if data[x][y] == 0:
                    continue
                if data[x][y] == 9:
                    flashes += 1
                    data[x][y] = 0
                    flashed.append((x, y))
                    flash(data, x, y, flashed, flashes)
                else:
                    data[x][y] += 1
        a =  [item for sublist in data for item in sublist]

        if a.count(0) == 100:
            print(f"step: {step}")
            return step + 101

    # for line in data:
    #     print(line)
    # print(data == step_100)

    # print(f"{foo}")
    # return flashes


print(part_two(data))

# if __name__ == "__main__":
#     part_one(data)